; sum.d16 
; sample program demonstrating making a function call with JSR
; and saving registers on the stack
; 
; basically the program computes:
; Z = sum(1,X) + sum(1,Y)
;
; in this example X is set to 5, Y is set to 6
; sum(1,5) + sum(1,6) = 15 + 21 = 36
; in the end, register Z should contain 36 (0x24)

SET X, 5
SET Y, 6
SET PUSH, X
SET PUSH, Y
SET A, X
SET C, sum
JSR C
SET Y, POP
SET X, POP
SET B, A
SET PUSH, X
SET PUSH, Y
SET PUSH, B
SET A, Y
SET C, sum
JSR C
SET B, POP
SET Y, POP
SET X, POP
SET C, A
SET Z, B
ADD Z, C
SET PC, crash

:sum SET I, A
SET J, 0
:loopsum ADD J, I
SUB I, 1
IFN I, 0
SET PC, loopsum
SET A, J
SET PC, POP

:crash SET [0x1000], 0xFFF0
SET PC, 0x1000
